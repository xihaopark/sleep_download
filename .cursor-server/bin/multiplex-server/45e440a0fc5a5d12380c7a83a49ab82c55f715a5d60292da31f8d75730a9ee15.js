"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(e){for(var r,o=1,n=arguments.length;o<n;o++)for(var t in r=arguments[o])Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t]);return e},__assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var net_1=require("net"),child_process_1=require("child_process"),crypto_1=require("crypto"),token=process.argv[2];token||(console.error("Token must be provided as the first argument"),process.exit(1));var DEFAULT_SHUTDOWN_TIMEOUT_MS=3e5,SHUTDOWN_TIMEOUT_MS=DEFAULT_SHUTDOWN_TIMEOUT_MS;process.env.VSCODE_SERVER_SHUTDOWN_TIMEOUT&&(SHUTDOWN_TIMEOUT_MS=1e3*parseInt(process.env.VSCODE_SERVER_SHUTDOWN_TIMEOUT,10),isNaN(SHUTDOWN_TIMEOUT_MS)&&(console.error("Invalid VSCODE_SERVER_SHUTDOWN_TIMEOUT: ".concat(process.env.VSCODE_SERVER_SHUTDOWN_TIMEOUT)),SHUTDOWN_TIMEOUT_MS=DEFAULT_SHUTDOWN_TIMEOUT_MS));var inactivityTimer,server=(0,net_1.createServer)({keepAlive:!0},(function(e){console.log("Server received connection"),resetInactivityTimer();var r,o,n=Buffer.alloc(0);e.on("close",(function(){console.log("[remoteServer][".concat(o,"] Socket closed; killing child process")),r&&r.pid&&!r.killed&&((null==r?void 0:r.kill())||console.error("[remoteServer][".concat(o,"] Failed to kill child process")))})),e.on("data",(function(t){var i,s,c;if(n=Buffer.concat([n,t]),void 0===r){var a=n.indexOf(Buffer.from("\n"));if(-1===a)return;var d=n.subarray(0,a).toString();n=n.subarray(a+1);var l=void 0;try{l=JSON.parse(d)}catch(r){return console.error("Error parsing JSON command:",r),void e.destroy()}if(l.token!==token)return console.error("Invalid token:",l.token),e.write(JSON.stringify({type:"exit",code:401})+"\n"),void e.end();o=null!==(i=l.id)&&void 0!==i?i:(0,crypto_1.randomUUID)(),console.log("[command][".concat(o,"] Executing command: ").concat(l.command," ").concat((null!==(s=l.args)&&void 0!==s?s:[]).join(" "))),(r=(0,child_process_1.spawn)(l.command,null!==(c=l.args)&&void 0!==c?c:[],{env:__assign(__assign({},process.env),l.env),cwd:l.cwd,shell:!1,stdio:"pipe"})).stdout.on("data",(function(r){var o={type:"stdout",data:r.toString("base64")};e.write(JSON.stringify(o)+"\n")})),r.stdout.on("end",(function(){e.write(JSON.stringify({type:"stdout-end"})+"\n")})),r.stderr.on("data",(function(r){var o={type:"stderr",data:r.toString("base64")};e.write(JSON.stringify(o)+"\n")})),r.stderr.on("end",(function(){e.write(JSON.stringify({type:"stderr-end"})+"\n")}));var v=!1;r.on("error",(function(r){v?console.log("[command][".concat(o,"] Process exited with error but we already sent an exit message"),r):(v=!0,console.error("[command][".concat(o,"] Process error"),r),e.write(JSON.stringify({type:"exit",code:1})+"\n"),e.end())})),r.on("exit",(function(r){if(v)console.log("[command][".concat(o,"] Process exited with code ").concat(r," but we already sent an exit message"));else{v=!0,console.log("[command][".concat(o,"] Process exited with code ").concat(r,". Sending exit message"));var n={type:"exit",code:null!==r?r:0};e.write(JSON.stringify(n)+"\n"),e.end()}}))}var u=n.indexOf(0);if(-1!==u){var S=n.subarray(0,u);try{var f=Buffer.from(S.toString("utf-8"),"base64");r.stdin.write(f)}catch(o){return console.error("Error decoding base64 data:",o),e.destroy(),void r.kill("SIGKILL")}return r.stdin.end(),void(n=Buffer.alloc(0))}var _=4*Math.floor(n.length/4);if(0!==_){var T=n.subarray(0,_);n=n.subarray(_);try{f=Buffer.from(T.toString("utf-8"),"base64"),r.stdin.write(f)}catch(o){return console.error("Error decoding base64 data:",o),r.kill("SIGKILL"),void e.destroy()}}})),e.on("error",(function(e){console.error("[remoteServer][".concat(o,"] Socket error:"),e),r&&r.kill("SIGKILL")}))}));function resetInactivityTimer(){inactivityTimer&&clearTimeout(inactivityTimer),inactivityTimer=setTimeout((function(){console.error("No connections received for ".concat(SHUTDOWN_TIMEOUT_MS/1e3," seconds, shutting down...")),process.exit(0)}),SHUTDOWN_TIMEOUT_MS)}resetInactivityTimer(),server.listen({host:"127.0.0.1",port:0},(function(){var e=server.address();null===e&&(console.error("Failed to get server address"),process.exit(1)),"string"==typeof e&&(console.error("Invalid address: ".concat(e)),process.exit(1)),console.log("Server listening on ".concat(e.port))})),process.on("SIGINT",(function(){server.close((function(){console.log("Server closed"),process.exit(0)}))}));